{% extends 'dashboard-creche.html.twig' %}

{% block content %}
	<!-- Bouton pour ouvrir le modal -->
	<div class="entete_calendar">
		<div class="header-container_calendar row ">
			<div class="titre-header_calendar col text-start">Réservations</div>
			<div class="div-links_calendar col text-end">
				<a href="#" class="nav-links_calendar">Liste</a>
				<a href=" {{ path('app_agenda', {id:app.user.id}) }}" class="nav-links_calendar">Calendrier</a>
			</div>
		</div>
	</div>
	<div class="button-ajout_calendar-form">
		<button class="button-ajout_calendar text-uppercase" id="calendarModalButton">+ Ajouter</button>
	</div>
	{# id="openModalButton" #}
	<div class="calendar_form">
		<div id='calendar' data-edit-url=""></div>
	</div>
{% endblock %}

{% block javascripts %}


	<script>

		document.addEventListener('DOMContentLoaded', function () { // déclaration des constantes
const calendarEl = document.getElementById('calendar');


// Initialisation du calendar
const calendar = new FullCalendar.Calendar(calendarEl, {
initialView: 'dayGridMonth',
locale: 'fr',
timeZone: 'Europe/Paris',
headerToolbar: {
start: 'prev,next',
center: 'title',
end: 'dayGridMonth,timeGridWeek,list'
},

eventClick: function (info) { // Récupérer l'ID de l'événement cliqué
const eventId = info.event.id;

// Construire l'URL pour l'édition de l'événement
const editEventURL = `/calendar/${eventId}/edit`;


fetch (`/calendar/${eventId}/edit`).then(response => response.text()).then(html => { // Insérer le contenu de la modal dans le corps du document
document.body.insertAdjacentHTML('beforeend', html);

// Activer la modal après avoir ajouté son contenu au DOM
const modalEdit = document.getElementById('myModal');
modalEdit.id = eventId;
const modal = new bootstrap.Modal(modalEdit);
modal.show();

modal._element.addEventListener('shown.bs.modal', editSubmitHandler);
});

function editSubmitHandler() { // Récupérer le formulaire de la modal
const formInModal = document.getElementById('myFormInModal');

formInModal.addEventListener('submit', function (event) {
event.preventDefault();
// Empêcher le comportement par défaut du formulaire

// Récupérer les données du formulaire
const formData = new FormData(formInModal);

// Configuration de la requête fetch pour soumettre les données du formulaire au serveur
fetch (`/calendar/${eventId}/edit`, {
method: 'POST',
body: formData // Les données du formulaire (FormData)
}).then(response => {
if (!response.ok) {
throw new Error('Erreur lors de la requête');
}
// Soumission réussie du formulaire, fermer la modal après un court délai
setTimeout(function () {
const modalEdit = document.getElementById(eventId);
const modal = new bootstrap.Modal(modalEdit);
modal.hide();
// Recharger la page après la fermeture de la modal
window.location.reload();
}, 500); // Attendre 500ms avant de fermer la modal et recharger la page (à des fins de démonstration)
}).catch(error => {
console.error('Erreur lors de la soumission du formulaire :', error);
// Gérer les erreurs ici (afficher un message d'erreur, etc.)
});
});
}

},
// Configuration du calendar par un appel de ses classes js
events: {{ data|raw }},
editable: true,
eventResizableFromStart: true
})

// Persistance des données lorsque l'on bouge un évènement sur le calendar
calendar.on('eventChange', (e) => {
const url = `/rdv/${
e.event.id
}/edit`
const donnees = {
"title": e.event.title,
"description": e.event.extendedProps.description,
"start": e.event.start,
"end": e.event.end,
"backgroundColor": e.event.backgroundColor,
"borderColor": e.event.borderColor,
"textColor": e.event.textColor,
"allDay": e.event.allDay
}

// Requête au server par envoi HttpRequest
const xhr = new XMLHttpRequest()
// Methode PUT pour l'actualisation
xhr.open("PUT", url)
// Envoi en conversion json
xhr.send(JSON.stringify(donnees))

})

calendar.render();


})
	</script>

	{{ parent() }}
{% endblock %}
